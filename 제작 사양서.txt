AI 영상 콘텐츠 제작 자동화 프로그램 제작 사양서 (개선안)

1. 시스템 개요

프로그램명: AI Video Caption Generator
목표: AI를 활용하여 언어 학습용 YouTube 영상 콘텐츠의 기획, 스크립팅, 음성/영상 제작 과정을 자동화하고, 시청자 몰입도를 높이는 고품질의 동적 콘텐츠를 대량 생산하는 데스크톱 애플리케이션입니다.

UI 구성

0. 작성 규칙
    - 모든 타이틀과 입력창은  모두 같은 행에 배치 한다. (예: 원어: Dropbox or CSV 파일: 입력박스)
    - 타이틀과 입력창, 드롭박스는 항상 붙여서 표시한다.
    - 입력창, 드롭박스의 크기는 타이틀(텍스트의 갯수 넓이)의 형식으로 표시한다.
    - 메인 윈도우의 크기는 1200x800 픽셀로 한다.
    - 한 행에 있는 것은 모두 좌측으로 정렬한다.
    - 메인 윈도우
        - 크기: 1600x800 픽셀, 중앙에 디스플레이
        - 테마: CustomTkinter 모던 테마
        - 탭 구조: 데이터 소스, 화자 선택, 이미지 설정
    - 바탕색 :#2C3E50, 창, 드롭박스 :rgb(9, 9, 9)으로 버튼 :rgb(1, 1, 82) 세팅
    - 버튼이 눌리면 색을 바꾸는 등 동작 상황을 알 수 있게 하고 실행이 끝나면 원상 복귀한다.
    
기술 스택
    1. 프로그래밍 언어 : Python 3.6+
    2. 주요 라이브러리
        - customtkinter: 모던한 GUI 인터페이스
        - google-cloud-texttospeech: Google TTS API 클라이언트
        - pydub: 오디오 파일 처리
        - pygame: 오디오 재생
        - flask: 웹 서버 (음성 녹음)
        - sounddevice: 실시간 음성 녹음
        - Pillow: 이미지 처리

    3. 외부 API
        - Google Cloud Text-to-Speech API: 음성 합성
        - AI 데이터 생성 엔진: 학습 데이터 자동 생성


1. 데이터 생성탭 : 4개의 섹션으로 구성 한다.위에서 아래로 구성한다.
    1.1. 데이터 섹션     
        1행 : '원어'(20), '학습어'(20) Dropbox, '프로젝트명' : 입력창(20), '식별자': 입력창(20)
            원어 : 배우는 사람이 쓰는 언어, 학습어 : 배울 언어
        2행 : '학습 주제'(20) Dropbox, '직접 주제를 입력하세요'(50), '등급'(15) Dropbox,'데이터 개수'(3) Dropbox
        3행: 'AI 서비스'(20) Dropbox 'AI 데이터 생성' 버튼
        '추가 요구사항' 삭제 
    1.2. 스크립트 섹션
        - 스크립트 선택 : Dropbox(30)
            회화 스크립트, 타이틀 스크립트, 썸네일 스크립트, 인트로 스크립트,
            엔딩 스크립트, 키워드 스크립트, 배경 스크립트, 대화 스크립트 항목으로 구성되어 있다.
        - 스크립트 창: 스크립트 창에는 '스크립트 선택'에서 선택된 스크립트를 디스플레이 한다. (높이를 2배로 확대)
        - 스크립트는 MD 형식의 텍스트나 CSV 파일로 되어있고 스크립트 창에서 수정할 수 있다.
    

    1.3. 메시지 윈도우
        - 실행중인 프로세스의 진행 상태, 에러메시지 등을 표시하는 창 (높이를 2배로 확대)

    1.4. 콘트롤 버튼 섹션
        - 오디오 생성: 스크립트 전체의 TTS 오디오 파일(.mp3)을 생성합니다.
        - 오디오 듣기: 선택된 스크립트 라인을 TTS로 실시간 재생하여 확인합니다.
        - 썸네일 생성: '썸네일 설정' 탭의 디자인에 따라 썸네일 이미지를 생성합니다.
        - 회화 비디오: 회화 스크립트, 생성된 오디오, '이미지 설정'을 종합하여 회화 영상을 만듭니다.
        - 인트로 비디오: 인트로 스크립트로 각각의 영상을 만듭니다.
        - 엔딩 비디오: 엔딩 스크립트로 각각의 영상을 만듭니다.
        - 대화 비디오: 내레이터와 학습자 간의 대화 형식으로 구성된 별도의 영상을 제작합니다.
        - 정지 버튼: 현재 실행 중인 모든 백그라운드 작업(오디오/비디오 생성, TTS 미리 듣기 등)을 즉시 강제 중단합니다.
        - 종료 버튼: 애플리케이션을 안전하게 종료합니다. 
            변경 후 저장되지 않은 내용이 있을 경우 저장합니다.
        밑에 한줄로 배치한다.

2. 화자 선택 탭 : 원어 화자와 학습어 화자를 선택한다.
    2.1. 화면 구성
        - 원어 화자:
            화자 선택 드롭박스(50), 미리듣기 버튼
        - 학습어 화자:
            화자 수 : 숫자 선택 박스 Default 4 (수에 따라 학습어 화자의 행이 표시 된다)
                    크기는 세 글자 들어갈 정도의 크기
            학습어 1 선택 드롭박스(50), 미리 듣기 버튼
            학습어 2 선택 드롭박스(50), 미리 듣기 버튼
            학습어 3 선택 드롭박스(50), 미리 듣기 버튼
            학습어 4 선택 드롭박스(50), 미리 듣기 버튼
        각각의 화자와 화자 수는 줄을 맞춰서 정렬 해서 디스플레이 한다.
        - 화자 설정 저장 버튼
            출력 경로: './output/{프로젝트명}/{식별자}/speaker.json로 설정 파일을 저장한다.
            프로그램이 실행할 때는 프로젝트에 맞는 speaker 설정 파일을 읽어온다.

3. 이미지 설정 탭

    - 이미지 설정의 UI는 4개의 섹션으로 구성하고 공통 설정, 텍스트 설정, 메시지 창, 콘트롤 섹션으로 구성한다.
 
    3.1. 공통 설정 섹션 (배경 설정 섹션)
        1 행: 화면비율(10) Dropbox, 해상도(15)Dropbox
        2행: '배경 설정:' 텍스트, '색상','이미지','동영상' (라디오 버튼), 입력창(20) 입력창, '찾아보기' 버튼
            색상 : 배경칼라 선택 (칼라)
            이미지 : 배경 이미지 선택 (jpg, png)
            비디오 : 배경 비디오 선택 (mp4)
            라디오 버튼의 선택에 따라서 입력창에는 해당 데이타를 입력 할 수 있도록 한다
        3행: '바탕 설정:' 텍스트, 바탕색(10) 입력창,투명도(10) 입력창,여백(10) Dropbox
        4행: '쉐도우 설정:' 텍스트, 두께(5) 입력창, 쉐도우 색상(10) 입력창
        5행: '외곽선 설정:' 텍스트, 두께(5) 입력창, 외곽선 색상(10) 입력창   
    
    3.2. 텍스트 설정
        - '회화 설정', '썸네일 설정','인트로 설정', '엔딩 설정', '스크립트 설정'의 5개 탭으로 구성 되있다.
        - 각 대본 그리드 형식으로 구성 된다.
        - 타이틀은 행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬로 구성하고 입력창과 Dropbox의 중앙 절렬한다.
        - 각 행의 크기는 다음과 같고 데이터는 중앙 정렬한다.
            행(5) 텍스트, l(5) 입력창, r(5)입력창, v(6)입력창, 크기(px)(5)입력창,
            폰트(pt)(30) Dropbox,색상(10) 입력창,
            굵기(8) Dropbox,좌우 정렬(8) Dropbox,상하 정렬(8) Dropbox 
        
        Default 값
        
        - 회화 설정     텍스트 행수(3) : 4
            행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬
            순번, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top
            원어, 50, 50, 80, 100, KoPubWorldDotum, #H0000FFFF, Bold, Left, Top
            학습어, 50, 50, 80, 100, Noto Sans Gothic, #H00FF00FF, Bold, Left, Top
            읽기, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFF00, Bold, Left, Top

        - 썸네일 설정     텍스트 행수 : 4
            행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬
            1행, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top
            2행, 50, 50, 80, 100, KoPubWorldDotum, #H0000FFFF, Bold, Left, Top
            3행, 50, 50, 80, 100, KoPubWorldDotum, #H00FF00FF, Bold, Left, Top
            4행, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFF00, Bold, Left, Top


        - 인트로 설정     텍스트 행수 : 1
            행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬
            1행, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top
            

        - 엔딩 설정     텍스트 행수 : 1
            행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬
            1행, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top

        - 스크립트 설정     텍스트 행수 : 3
            행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬
            원어, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top
            학습어1, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top
            학습어2, 50, 50, 80, 100, KoPubWorldDotum, #H00FFFFFF, Bold, Left, Top

        텍스트 행수에 따라 표시되는 행의 수만큼 행을 표시한다.
   
    3.3 메시지 창 섹션
        현재 UI에 설정된 모든 디자인 값을 JSON 형식 또는 읽기 

    3.4 콘트롤 버튼 섹션
        - '설정 저장' 버튼: 정의된 모든 데이터를 저장
        - '설정 읽기' 버튼: 저장된 데이터를 불러와 모든 UI 컨트롤에 값을 복원하여, 일관된 디자인 템플릿을 재사용할 수 있다.



프로그램 실행시 전에 실행된 파일이 있으면 그 프로그램을 죽이고 실행한다.




동작 방법

0. 초기화
    - google TTS 연결
        Google TTS에서 지원하는 언어 목록을 동적으로 가져오기
        Google TTS API 인증
    - gemini 2.5 flash 연결

1. 프로젝트 설정
    
    - 언어 페어 : 원어, 학습어 선택 드롭박스에 다음의 지원언어에서 선택하게한다.
        지원 언어
            - 한국어 (ko-KR):
            - 영어: en-US
            - 일본어 (ja-JP)
            - 중국어: cmn-CN
            - 베트남어 (vi-VN)
            - 인도네시아어 (id-ID)
            - 이탈리아어 (it-IT)
            - 스페인어 (es-US)
            - 프랑스어 (fr-FR)
            - 독일어 (de-DE)
    - 프로젝트 명: kor-jpn과 같이 [3자리 언어코드]-[3자리 언어코드] 형식으로 자동 생성됩니다.
    - 식별자: kor-jpn과 같이 [3자리 언어코드]-[3자리 언어코드] 형식으로 자동 생성됩니다.
    - 프로그램이 종료 될 때 실행 프로젝트를 저장했다가 프로그램이 다시 시작할 때 다시 프로젝트명, 식별자와 
      언어 페어로 세팅 한다.

    - 출력 경로: './output/{프로젝트명}/{식별자}/'에 .json, .csv, .mp3, .mp4, .jpg 
        파일을 {식별자} 이름으로 저장한다.
        
2. 데이타 생성 탭
    - AI 데이터 생성
        - 텍스트 영역학습 주제를 선택 한다.
        - 생성할 스크립트의 톤앤매너, 특정 단어 포함 등 세부 조건을 입력하는 경우에는 추가 요구사항에 입력 한다.
        - 필요시 AI 서비스를 선택한다.
        - 학습 등급을 선택한다.
        - 생성 할 데이터 개수를 입력 한다.
        - AI 데이터 생성 버튼을 누른다.
        - 입력 된 데이터를 사용하여 AI Prompt 파일에 위에서 입력된 '주제', '추가 요구사항', '등급', '개수'를 입력하여
          AI 프롬프트를 만들어서 AI에게 데이터 생성을 요청 한다.
          이때 만들어진 prompt 파일을 ./output/{프로젝트명}/{식별자} 폴더에 {식별자}_prompt.json 파일로 저장한다. (디버깅을 위해))
        - AI가 출력한 JSON 파일을 ./output/{프로젝트명}/{식별자} 폴더에 {식별자}_ai.json으로 저장한다.
        - 출력 된 json 파일을 파싱하여 해당 스크립트 데이터 창에 입력 한다.
        - '스크립트 선택'을 선택하면 선택된 데이터를 데이터창에 디스플레이하고 오디오 생성, 오디오 듣기 버튼이 활성화 되어야한다.
    
    - 오디오 생성
        회화 스크립트 창에서 데이터를 한 행씩 가져와서 오디오를 실시간 생성한다.
        화자 : 원어화자, 학습어 화자 1,2,3,4 
        대화 순번 : 다음과 같이 재생하며 화자간에는 1추의 무음을 넣어준다.
            1. 원어화자 - 원어
            2. 학습어 화자 1 - 학습어
            3. 학습어 화자 2 - 학습어
            4. 학습어 화자 3 - 학습어
            3. 학습어 화자 4 (1 원어, 4 학습어)
        회화 스크립트 각 행을 파싱하는 로직을 구현합니다.
        전체 행을 mp3로 만든다.
        이때 만들어진 mp3 파일을 ./output/{프로젝트명}/{식별자} 폴더에 {식별자}.mp3 파일로 저장한다.
        

    - 오디오 듣기
        화자 : 원어화자, 학습어 화자 1,2,3,4 
        대화 순번 : 원어화자, 학습어 화자 1, 학습어 화자 2, 학습어 화자 3, 학습어 화자 4 (1 원어, 4 학습어)순서로 읽기
        읽는 순서 :  각 행별로 다음 순서로 읽고 전체 행을 읽는다.
            원어 화자 : 원어 화자(원어 텍스트), 학습어 화자 1 (학습어 텍스트), 학습어 화자 2 (학습어 텍스트), 
            학습어 화자 3(학습어 텍스트), 학습어 화자 4(학습어 텍스트) 순으로 실시간으로 읽는다.
        각 행별로 원어 화자 및 4명의 학습어 화자(총 5명)에 대해 Google TTS를 호출하는 로직을 구현합니다.
        실시간 듣기로 오디오 재생한다.
        각 화자 오디오 클립 사이에 1초 무음을 포함하여 연결하는 로직을 구현합니다.
        

    - 회화 비디오 생성
        각 행별로 2개의 독립적인 텍스트 화면을 생성하는 로직을 구현합니다.
            화면 1: 순번, 원어 텍스트만 화면에 표시하고 오디오 화자는 원어 화자로 원어 시간 시작과 종료 시간까지 디스플레이 한다.
            화면 2: 순번, 원어, 학습어, 읽기를 화면에 표시하고 오디오 화자는 학습어 1,2,3,4 화자로 
                학습어 화자 1 시간 시작에서 학습어 화자 4 종료 시간까지 디스플레이 한다.
        각 화자간에는 무음 1초를 삽입한다.
        SSML `<mark>` 태그를 사용하여 정확한 타이밍이 있는 '오디오 생성'과 같은 방법으로 mp3 파일을 만든다.

    - 인트로/ 엔딩 비디오 생성
        문장 단위로 스크립트를 읽어 자막을 만들며, 자막의 길이가 길어서 화변 밖으로 나가면 스마트 문장 분리로
        최대 3줄 까지 만든다.
        자막은 v(vertical offset)을 기준으로 줄 수에 따라 위에서 아래로 쓰며, 마지막 줄이 항상 v값을 마지막 줄의 기준  값으로 한다.   
        문장은 md 속성으로 문장안에 칼라, 굵기 등 속성을 처리할 수 있게 한다.

    대화 비디오 생성
        - 대화문은 내레이터, 화자 1,2 등 정해준 화자로 정해진 위치에 표시하고, 화자 수 만큼 반복해서 읽고
            자막은 화자 1의 시작 시간부터 화자 n의 종료 시간 까지 유지한다.
        - 내레이터가 없으면 화자의 내레이션만 사용한다.

        
    - 정지 버튼: 현재 실행 중인 모든 백그라운드 작업(오디오/비디오 생성, TTS 미리 듣기 등)을 즉시 강제 중단합니다.

    - 종료 버튼: 애플리케이션을 안전하게 종료합니다. 변경 후 저장되지 않은 내용이 있을 경우 저장합니다.

3. 화자 선택 탭
    - 오디오 제작에 필요 '원어'(또는 내레이터) '학습어 화자수'를 선택하면 필요한 
        학습어 수(Default 4)만큼을 입력 할 수 있는 행이 만들어진다.
    - '원어', '학습어 화자'의 언어 선택은 기본적으로 '데이터 생성' 탭에서 입력 된 언어 페어('원어', '학습어')를 사용하여 
        자동으로 언어가 선택이 되도록 한다.
    - 자동 선택된 언어의 화자를 Google TTS에서 제공하는 해당 언어의 
        모든 화자가 디스플레이 되도록 한다.
    - '화자 설정 저장'버튼
        - 선택된 모든 화자를 저장하고, '화자 선택' 탭이 눌렀을 경우에는 저장된 데이터가 있으면 
        저장된 데이터를 자동으로 읽어 온다.
        - 화자 설정 JSON 파일을 ./output/{프로젝트명}/{식별자} 폴더에 {식별자}_speaker.json으로 저장한다.
    - '미리듣기' 버튼
        - '미리 듣기'는 '원어', '학습어' 화자 국가의 발음으로 미리듣기를 한다.

4. 이미지 설정 탭
    - 이미지 설정의 UI는 3개의 섹션으로 구성하고 공통 설정, 텍스트 설정, 메시지 창으로 구성한다.
    - 공통 설정 섹션은 
        화면 비율, 해상도
        배경 설정: 색상,이미지,동영상, 입력창
        바탕 설정: 바탕색,투명도,여백
        쉐도우 설정: 두께, 쉐도우 색상 
        외곽선 설정: 두께, 외곽선 색상
    - 텍스트 설정 섹션은 
        회화,썸네일,인트로,엔딩,스크립트의 탭으로 구성 된다.
        각 탭은 텍스트의 위치를 지정 하는 텍스트 설정
        각 탭은 텍스트 행 수를 입력받아 텍스트의 위치를 정하는 행을 표시한다.
        행은 타이틀은 행, l, r, v, 크기(px),폰트(pt),색상,굵기,좌우 정렬,상하 정렬로 구성 된다.
        l = Left, r = Right, v = Vertical offset
        회화 탭의 행 이름 : 순번, 원어, 학습어, 읽기
        썸네일 탭, 인트로 탭, 엔딩, 스크립트 탭의 행 이름 : 1행, 2행, 3행, 4행
    - 메시지 창 섹션
        현재 UI에 설정된 모든 디자인 값을 JSON 형식 또는 읽기 

    - 설정 저장    
        - 정의된 모든 데이터를 저장
    - 설정 읽기
        - 저장된 데이터를 불러와 모든 UI 컨트롤에 값을 복원하여, 일관된 디자인 템플릿을 재사용할 수 있다.


로컬 커밋 완료: 메시지 “UI와 기본 설정”
태그 생성: v0.1
아직 원격이 설정되어 있지 않습니다. GitHub 원격 URL을 알려주시면 다음을 실행해 푸시하겠습니다:

https://github.com/moonjanghwan/Text_to_Speech.git
git remote add origin https://github.com/moonjanghwan/Text_to_Speech.git
git push -u origin master
git push origin v0.1


회화비디오, 인트로 비디오, 엔딩비디오, 대화 비디오를 제작하려는데 어떻게 접근하는 것이 좋을까? 
가장 효율적인 프로세스를 정의하고 정확한 오디오, 비디오 타이밍을 맞추고 비디오를 만들 수 있는 
방법을 제시해줘

다음 프로세스로 가면 정확한 타이밍과 제작 효율을 동시에 잡을 수 있습니다.

### 전체 파이프라인

1. 데이터 표준화
    - 회화 CSV(순번, 원어, 학습어, 읽기), 인트로/엔딩/대화 스크립트를 표준 구조로 정리해 
    `timeline_manifest.json`에 저장.
    - 장면(Scene) 단위: id, type(intro|conversation|ending), text[], speaker, bg, 
        sfx, transition, notes.
        
2. 오디오 생성 + 타이밍 확보
    - SSML + 마크 사용 권장: 각 재생 단위(문장/어절) 앞에 `<mark name="seg_###"/>` 삽입해 요청.
    - Google TTS 요청 시 timepoint 활성화(SSML mark 기준). 응답의 timepoints로 정확한 ms 타임스탬프 획득.
    - 마크 미지원/실패 시 대체:
        - 문장 단위로 파일 분할 생성 → `pydub`으로 길이(ms) 측정 → 누적합으로 타임스탬프 생성.
    - 화자 간 무음(예: 1.0s)과 학습어 화자 사이 무음(예: 1.0s)을 오디오 타임라인에 삽입.
    - 결과물:
        - `output/{proj}/{id}/audio/master.wav|mp3`
        - `output/{proj}/{id}/audio/segments.json`(각 segment의 start_ms/end_ms/voice_name/문장)

3. 자막(SRT/ASS) 생성

    - `segments.json`의 start/end_ms로 SRT 생성.
    - 한-학습어 2라인 구성 or 색상/스타일 분리(ASS 권장)도 가능.
    - 결과물: `파일명.srt` 또는 `파일명.ass`.
    - 파일명

3. 비디오 템플릿 설계
    - 템플릿(해상도, 배경, 폰트, 안전영역, 자막 영역) 사전 정의.
    - 타입별 권장 템플릿:
        - 인트로: 브랜드/타이틀 + 짧은 SFX + 빠른 인로고
        - 회화 비디오: 배경(사진/영상/그라디언트) + 상단 원어/하단 학습어 + 말하는 동안 키네틱 
            텍스트
        - 엔딩: 콜투액션 + 아웃로고
        - 대화 비디오(씬 설명 기반): 씬별 배경 전환 + 전환 효과(fade/slide)

4. 렌더 타임라인 합성

    - 빠른 구현: moviepy(파이썬 내장)로 오디오 마스터 길이를 기준으로 장면/텍스트를 타임라인에 배치.
    - 고성능/정확성: ffmpeg filter_complex 스크립트 생성(자막, 이미지/영상 오버레이, 전환, scale, fps 고정).
    - 모든 오버레이 start/end를 `segments.json` 타임스탬프에 맞춤.

1. 산출물
    - `intro.mp4`, `conversation.mp4`, `ending.mp4`, `dialogue.mp4`
    - `master.mp4`(필요 시 합본)
    - `captions.srt/ass`, `timeline_manifest.json`, `audio/segments.json`

### 정확한 타이밍을 위한 핵심 팁

    - SSML 마크 기반 타임스탬프가 최선. 문장 또는 어절 단위로 `<mark/>`를 삽입해 말풍선/하이라이트 타이밍에 그대로 사용.
    - 무음은 오디오에 실제 삽입하여 영상과 자연 정렬이 되게 함.
    - FPS 고정(예: 30fps) 및 오디오 시작 오프셋(0ms) 고정.
    - 자막은 오디오 타임라인을 “진실”로 삼고, 비디오 오버레이는 자막과 동일한 start/end로 설정.

### 파일/데이터 예시

- segments.json

```json
{
  "segments": [
    {"id":"n1","speaker":"native","text":"안녕하세요","start_ms":0,"end_ms":1200,"voice":"ko-KR-..."},
    {"id":"sil1","type":"silence","start_ms":1200,"end_ms":2200},
    {"id":"l1","speaker":"learner_1","text":"你好","start_ms":2200,"end_ms":3300,"voice":"cmn-CN-..."}
  ]
}

```

- timeline_manifest.json

```json
{
  "project":"kor-chn","identifier":"kor-chn",
  "scenes":[
    {"id":"intro","type":"intro","bg":"bg/intro.jpg","duration_ms":3000,"text":["타이틀"]},
    {"id":"conv_01","type":"conversation","from_segment":"n1","to_segment":"l1","bg":"bg/scene1.jpg"},
    {"id":"ending","type":"ending","bg":"bg/outro.jpg","duration_ms":2500}
  ]
}

```

### 구현 순서 제안(가장 효율)

    1 단계: segments.json 생성기 완성
        - SSML 마킹 → 시간표시 수집 → 오디오 마스터/세그먼트 JSON 저장
    2 단계: 자막 생성기(SRT/ASS)
    3 단계: moviepy 기반 프로토타입 렌더
        - 배경, 자막, 간단 전환으로 전체 파이프라인 검증
    4 단계: ffmpeg 스크립트 자동 생성(성능/품질 향상)
        - 하드서브(ASS), 전환효과, 자막 스타일, 스케일링
    5 단계: 타입별(인트로/회화/엔딩/대화) 템플릿과 스타일 고도화

원하시면 위 순서대로 우리 코드에 `segments.json` 생성과 SRT/ASS 생성부터 바로 넣어드릴게요.


여기서 회화, 인트로, 앤딩, 대화를 구분하는 이름을 사용(예: _intro, _ending 등)하는 내용으로 수정해줘

그럼 회화 제작 방식으로 비디오를 만드는 ass 파일을 만드는 과정을 정확하게 만들어줘.
이때 [Styles]의 Format: 은 화자 선택, 이미지 설정의 데이터를 사용하여 만들고,
바탕을 사용하기 위해서는 layer를 사용해야하는데 이를 반영하고
md 파일 내 색상, 폰트, 굵기 등 특정 속성을 반영하게 하는 기능을 반영하는 방법을 만들어줘